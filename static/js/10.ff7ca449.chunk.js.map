{"version":3,"sources":["pages/Home/DisplacementSphere.js","pages/Home/sphereVertShader.js","pages/Home/sphereFragShader.js"],"names":["DisplacementSphere","props","theme","useTheme","rgbBackground","themeId","colorWhite","start","useRef","Date","now","canvasRef","mouse","renderer","camera","scene","lights","uniforms","material","geometry","sphere","sphere2","tweenRef","sphereSpring","prefersReducedMotion","usePrefersReducedMotion","isInViewport","useInViewport","windowSize","useWindowSize","useEffect","innerWidth","innerHeight","window","current","Vector2","WebGLRenderer","canvas","antialias","powerPreference","setSize","setPixelRatio","outputEncoding","sRGBEncoding","PerspectiveCamera","position","z","Scene","MeshPhongMaterial","onBeforeCompile","shader","UniformsUtils","merge","UniformsLib","time","type","value","vertexShader","fragmentShader","SphereBufferGeometry","Mesh","modifier","Math","random","add","cleanScene","cleanRenderer","dirLight","DirectionalLight","ambientLight","AmbientLight","x","y","background","Color","rgbToThreeColor","forEach","light","removeLights","width","height","adjustedHeight","aspect","updateProjectionMatrix","render","media","mobile","tablet","onMouseMove","event","rotation","clientX","clientY","toArray","values","set","spring","from","get","to","stiffness","damping","velocity","getVelocity","mass","restSpeed","addEventListener","removeEventListener","stop","animation","animate","requestAnimationFrame","undefined","cancelAnimationFrame","Transition","appear","in","onEnter","reflow","timeout","status","className","classNames","ref"],"mappings":"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","file":"static/js/10.ff7ca449.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\nimport classNames from 'classnames'\nimport {\n    Vector2,\n    sRGBEncoding,\n    WebGLRenderer,\n    PerspectiveCamera,\n    Scene,\n    DirectionalLight,\n    AmbientLight,\n    UniformsUtils,\n    UniformsLib,\n    MeshPhongMaterial,\n    SphereBufferGeometry,\n    Mesh,\n    Color,\n} from 'three'\nimport { spring, value } from 'popmotion'\nimport vertShader from './sphereVertShader'\nimport fragShader from './sphereFragShader'\nimport { Transition } from 'react-transition-group'\nimport { useTheme } from 'components/ThemeProvider'\nimport { usePrefersReducedMotion, useInViewport, useWindowSize } from 'hooks'\nimport { reflow } from 'utils/transition'\nimport { media, rgbToThreeColor } from 'utils/style'\nimport { cleanScene, removeLights, cleanRenderer } from 'utils/three'\nimport './DisplacementSphere.css'\n\nconst DisplacementSphere = props => {\n    const theme = useTheme()\n   // console.log(theme)\n    const { rgbBackground, themeId, colorWhite } = theme\n    const start = useRef(Date.now())\n    const canvasRef = useRef()\n    const mouse = useRef()\n    const renderer = useRef()\n    const camera = useRef()\n    const scene = useRef()\n    const lights = useRef()\n    const uniforms = useRef()\n    const material = useRef()\n    const geometry = useRef()\n    const sphere = useRef()\n    //const sphere1 = useRef()\n    const sphere2 = useRef()\n    const tweenRef = useRef()\n    const sphereSpring = useRef()\n    const prefersReducedMotion = usePrefersReducedMotion()\n    const isInViewport = useInViewport(canvasRef)\n    const windowSize = useWindowSize()\n\n    useEffect(() => {\n        const { innerWidth, innerHeight } = window\n        mouse.current = new Vector2(0.8, 0.5)\n        renderer.current = new WebGLRenderer({\n            canvas: canvasRef.current,\n            antialias: true,\n            powerPreference: 'high-performance',\n        })\n        renderer.current.setSize(innerWidth, innerHeight)\n        renderer.current.setPixelRatio(1)\n        renderer.current.outputEncoding = sRGBEncoding\n\n        camera.current = new PerspectiveCamera(54, innerWidth / innerHeight, 0.1, 100)\n        camera.current.position.z = 82\n\n        scene.current = new Scene()\n\n        material.current = new MeshPhongMaterial()\n        material.current.onBeforeCompile = shader => {\n            uniforms.current = UniformsUtils.merge([\n                UniformsLib['ambient'],\n                UniformsLib['lights'],\n                shader.uniforms,\n                { time: { type: 'f', value: 0 } },\n            ])\n\n            shader.uniforms = uniforms.current\n            shader.vertexShader = vertShader\n            shader.fragmentShader = fragShader\n        }\n\n        geometry.current = new SphereBufferGeometry(25, 300, 300)\n\n        sphere.current = new Mesh(geometry.current, material.current)\n        sphere.current.position.z = 0\n        sphere.current.modifier = Math.random()\n        scene.current.add(sphere.current)\n\n\n\n        // sphere1.current = new Mesh(geometry.current, material.current)\n        // sphere1.current.position.z = 0\n        // sphere1.current.modifier = Math.random()\n        // scene.current.add(sphere1.current)\n\n        sphere2.current = new Mesh(geometry.current, material.current)\n        sphere2.current.position.z = 0\n        sphere2.current.modifier = Math.random()\n        scene.current.add(sphere2.current)\n\n        return () => {\n            cleanScene(scene.current)\n            cleanRenderer(renderer.current)\n        }\n    }, [])\n\n    useEffect(() => {\n        const dirLight = new DirectionalLight(colorWhite, 0.4)\n        const ambientLight = new AmbientLight(colorWhite, themeId === 'light' ? 0.8 : 0.3)\n\n        dirLight.position.z = 200\n        dirLight.position.x = 200\n        dirLight.position.y = 200\n\n        lights.current = [dirLight, ambientLight]\n        scene.current.background = new Color(...rgbToThreeColor(rgbBackground))\n        lights.current.forEach(light => scene.current.add(light))\n\n        return () => {\n            removeLights(lights.current)\n        }\n    }, [rgbBackground, colorWhite, themeId])\n\n    useEffect(() => {\n        const { width, height } = windowSize\n\n        const adjustedHeight = height + height * 0.4\n        renderer.current.setSize(width, adjustedHeight)\n        camera.current.aspect = width / adjustedHeight\n        camera.current.updateProjectionMatrix()\n\n        // Render a single frame on resize when not animating\n        if (prefersReducedMotion) {\n            renderer.current.render(scene.current, camera.current)\n        }\n\n        if (width <= media.mobile) {\n            sphere.current.position.x = 14\n            sphere.current.position.y = 10\n        } else if (width <= media.tablet) {\n            sphere.current.position.x = 18\n            sphere.current.position.y = 14\n        } else {\n            sphere.current.position.x = 22\n            sphere.current.position.y = 16\n        }\n    }, [prefersReducedMotion, windowSize])\n\n    useEffect(() => {\n        const onMouseMove = event => {\n            const { rotation } = sphere.current\n\n            const position = {\n                x: event.clientX / window.innerWidth,\n                y: event.clientY / window.innerHeight,\n            }\n\n            if (!sphereSpring.current) {\n                sphereSpring.current = value(rotation.toArray(), values =>\n                    rotation.set(values[0], values[1], sphere.current.rotation.z)\n                )\n            }\n\n            tweenRef.current = spring({\n                from: sphereSpring.current.get(),\n                to: [position.y / 2, position.x / 2],\n                stiffness: 30,\n                damping: 20,\n                velocity: sphereSpring.current.getVelocity(),\n                mass: 2,\n                restSpeed: 0.0001,\n            }).start(sphereSpring.current)\n        }\n\n        if (!prefersReducedMotion && isInViewport) {\n            window.addEventListener('mousemove', onMouseMove)\n        }\n\n        return () => {\n            window.removeEventListener('mousemove', onMouseMove)\n            tweenRef.current?.stop()\n        }\n    }, [isInViewport, prefersReducedMotion])\n\n    useEffect(() => {\n        let animation\n\n        const animate = () => {\n            animation = requestAnimationFrame(animate)\n\n            if (uniforms.current !== undefined) {\n                uniforms.current.time.value = 0.00005 * (Date.now() - start.current)\n            }\n\n            sphere.current.rotation.z += 0.001\n            renderer.current.render(scene.current, camera.current)\n        }\n\n        if (!prefersReducedMotion && isInViewport) {\n            animate()\n        } else {\n            renderer.current.render(scene.current, camera.current)\n        }\n\n        return () => {\n            cancelAnimationFrame(animation)\n        }\n    }, [isInViewport, prefersReducedMotion])\n\n    return (\n        <Transition appear in onEnter={reflow} timeout={3000}>\n            {status => (\n                <canvas\n                    aria-hidden\n                    className={classNames(\n                        'displacement-sphere',\n                        `displacement-sphere--${status}`\n                    )}\n                    ref={canvasRef}\n                    {...props}\n                />\n            )}\n        </Transition>\n    )\n}\n\nexport default DisplacementSphere\n","//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nexport default `\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nfloat turbulence(vec3 p) {\n  float w = 100.0;\n  float t = -.5;\n  for (float f = 1.0 ; f <= 10.0 ; f++) {\n    float power = pow(2.0, f);\n    t += abs(pnoise(vec3(power * p), vec3(10.0, 10.0, 10.0)) / power);\n  }\n  return t;\n}\n\n// START\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying float noise;\n\nvarying vec3 vViewPosition;\n\nvoid main() {\n  #include <beginnormal_vertex>\n  #include <defaultnormal_vertex>\n  #include <begin_vertex>\n  #include <project_vertex>\n  #ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\n    vNormal = normalize(transformedNormal);\n  #endif\n\n  vViewPosition = - mvPosition.xyz;\n\n  vUv = uv;\n\n  noise = turbulence(0.01 * position + normal + time * 0.8);\n  vec3 displacement = vec3((position.x) * noise, position.y * noise, position.z * noise);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4((position + normal) + displacement, 1.0);\n}\n`\n","export default `\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 newPosition;\nvarying float noise;\n\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <envmap_physical_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n  #include <clipping_planes_fragment>\n\n  vec3 color = vec3(vUv * (0.2 - 2.0 * noise), 1.0);\n  vec3 finalColors = vec3(color.b * 1.5, color.r, color.r);\n  vec4 diffuseColor = vec4(cos(finalColors * noise * 3.0), 1.0);\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\n  vec3 totalEmissiveRadiance = emissive;\n\n  #include <logdepthbuf_fragment>\n  #include <map_fragment>\n  #include <color_fragment>\n  #include <alphamap_fragment>\n  #include <alphatest_fragment>\n  #include <specularmap_fragment>\n  #include <normal_fragment_begin>\n  #include <normal_fragment_maps>\n  #include <emissivemap_fragment>\n  #include <lights_phong_fragment>\n  #include <lights_fragment_begin>\n  #include <lights_fragment_maps>\n  #include <lights_fragment_end>\n  #include <aomap_fragment>\n\n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n  #include <envmap_fragment>\n  #include <premultiplied_alpha_fragment>\n  #include <tonemapping_fragment>\n  #include <encodings_fragment>\n  #include <fog_fragment>\n\n  gl_FragColor = vec4(outgoingLight, diffuseColor.a);\n}\n`\n"],"sourceRoot":""}
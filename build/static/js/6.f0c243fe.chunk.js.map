{"version":3,"sources":["assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Text/index.js","components/DecoderText/index.js","components/Section/index.js","components/Divider/index.js","components/Input/TextArea.js","components/Input/index.js","../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/sendForm/sendForm.js","pages/Contact/index.js"],"names":["Heading","children","level","as","align","weight","className","rest","clampedLevel","Math","min","max","Component","Helmet","rel","href","GothamBold","crossorigin","classNames","Text","size","secondary","glyphs","CharType","DecoderText","text","start","delay","startDelay","output","useRef","type","value","container","reduceMotion","usePrefersReducedMotion","useEffect","containerInstance","current","content","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","floor","random","length","shuffle","prerender","chain","spring","from","to","stiffness","damping","stop","ref","memo","Section","forwardRef","Divider","lineWidth","lineHeight","notchWidth","notchHeight","collapseDelay","collapsed","style","numToMs","defaultProps","TextArea","resize","onChange","minRows","maxRows","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","getComputedStyle","parseInt","paddingHeight","paddingTop","paddingBottom","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","responseText","sendPost","url","data","headers","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","responseStatus","open","Object","keys","forEach","key","setRequestHeader","send","form","uID","_userID","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append","initDelay","durationS","getDelay","delayMs","initDelayMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","sendEmail","e","preventDefault","emailjs","then","result","console","log","name","appear","mountOnEnter","unmountOnExit","onEnter","reflow","method","onSubmit","durationXS","required","autoComplete","maxLength","errorStatus","Button","disabled","loading","loadingText","iconHoverShift"],"mappings":"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","file":"static/js/6.f0c243fe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react'\nimport classNames from 'classnames'\nimport { Helmet } from 'react-helmet'\nimport GothamBold from 'assets/fonts/gotham-bold.woff2'\nimport './index.css'\n\nconst Heading = ({\n    children,\n    level = 1,\n    as,\n    align = 'auto',\n    weight = 'medium',\n    className,\n    ...rest\n}) => {\n    const clampedLevel = Math.min(Math.max(level, 0), 4)\n    const Component = as || `h${Math.max(clampedLevel, 1)}`\n\n    return (\n        <Fragment>\n            {/* Conditionally load the bold font weight because we use it less frequently */}\n            {weight === 'bold' && (\n                <Helmet>\n                    <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\n                    <style>\n                        {`\n              @font-face {\n                font-family: 'Gotham';\n                font-weight: 700;\n                src: url(${GothamBold}) format('woff2');\n                font-display: swap;\n              }\n            `}\n                    </style>\n                </Helmet>\n            )}\n            <Component\n                className={classNames(\n                    className,\n                    'heading',\n                    `heading--align-${align}`,\n                    `heading--level-${clampedLevel}`,\n                    `heading--weight-${weight}`\n                )}\n                {...rest}\n            >\n                {children}\n            </Component>\n        </Fragment>\n    )\n}\n\nexport default Heading\n","import classNames from 'classnames'\nimport './index.css'\n\nconst Text = ({\n    children,\n    size = 'm',\n    as: Component = 'p',\n    align = 'auto',\n    weight = 'auto',\n    secondary,\n    className,\n    ...rest\n}) => {\n    return (\n        <Component\n            className={classNames(\n                className,\n                'text',\n                `text--align-${align}`,\n                `text--size-${size}`,\n                `text--weight-${weight}`,\n                {\n                    'text--secondary': secondary,\n                }\n            )}\n            {...rest}\n        >\n            {children}\n        </Component>\n    )\n}\n\nexport default Text\n","import { useRef, useEffect, memo } from 'react'\nimport classNames from 'classnames'\nimport { usePrefersReducedMotion } from 'hooks'\nimport { spring, chain, delay, value } from 'popmotion'\nimport VisuallyHidden from 'components/VisuallyHidden'\nimport prerender from 'utils/prerender'\nimport './index.css'\n\n// prettier-ignore\nconst glyphs = [\n    'अ',\n    'आ',\n    'इ',\n   ' ई ',\n    'उ',\n   ' ऊ',\n    'ऋ',\n   ' ए',\n    ' ऐ ',\n    'ओ',\n   ' औ',\n    'अं',\n    'अः'\n];\n\nconst CharType = {\n    Glyph: 'glyph',\n    Value: 'value',\n}\n\nfunction shuffle(content, output, position) {\n    return content.map((value, index) => {\n        if (index < position) {\n            return { type: CharType.Value, value }\n        }\n\n        if (position % 1 < 0.5) {\n            const rand = Math.floor(Math.random() * glyphs.length)\n            return { type: CharType.Glyph, value: glyphs[rand] }\n        }\n\n        return { type: CharType.Glyph, value: output[index].value }\n    })\n}\n\nconst DecoderText = ({\n    text,\n    start = true,\n    delay: startDelay = 0,\n    className,\n    ...rest\n}) => {\n    const output = useRef([{ type: CharType.Glyph, value: '' }])\n    const container = useRef()\n    const reduceMotion = usePrefersReducedMotion()\n\n    useEffect(() => {\n        const containerInstance = container.current\n        const content = text.split('')\n        let animation\n\n        const renderOutput = () => {\n            const characterMap = output.current.map(item => {\n                return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`\n            })\n\n            containerInstance.innerHTML = characterMap.join('')\n        }\n\n        const springValue = value(0, position => {\n            output.current = shuffle(content, output.current, position)\n            renderOutput()\n        })\n\n        if (start && !animation && !reduceMotion && !prerender) {\n            animation = chain(\n                delay(startDelay),\n                spring({\n                    from: 0,\n                    to: content.length,\n                    stiffness: 8,\n                    damping: 5,\n                })\n            ).start(springValue)\n        }\n\n        if (reduceMotion) {\n            output.current = content.map((value, index) => ({\n                type: CharType.Value,\n                value: content[index],\n            }))\n            renderOutput()\n        }\n\n        return () => {\n            if (animation) {\n                animation.stop()\n            }\n        }\n    }, [reduceMotion, start, startDelay, text])\n\n    return (\n        <span className={classNames('decoder-text', className)} {...rest}>\n            <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\n            <span aria-hidden className=\"decoder-text__content\" ref={container} />\n        </span>\n    )\n}\n\nexport default memo(DecoderText)\n","import { forwardRef } from 'react'\nimport classNames from 'classnames'\nimport './index.css'\n\nconst Section = forwardRef(\n    ({ as: Component = 'div', children, className, ...rest }, ref) => (\n        <Component className={classNames('section', className)} ref={ref} {...rest}>\n            {children}\n        </Component>\n    )\n)\n\nexport default Section\n","import classNames from 'classnames'\nimport { numToMs } from 'utils/style'\nimport './index.css'\n\nconst Divider = ({\n    lineWidth,\n    lineHeight,\n    notchWidth,\n    notchHeight,\n    collapseDelay,\n    collapsed,\n    className,\n    style,\n}) => (\n    <div\n        className={classNames('divider', className)}\n        style={{\n            '--lineWidth': lineWidth,\n            '--lineHeight': lineHeight,\n            '--notchWidth': notchWidth,\n            '--notchHeight': notchHeight,\n            '--collapseDelay': numToMs(collapseDelay),\n            ...style,\n        }}\n    >\n        <div\n            className={classNames('divider__line', {\n                'divider__line--collapsed': collapsed,\n            })}\n        />\n        <div\n            className={classNames('divider__notch', {\n                'divider__notch--collapsed': collapsed,\n            })}\n            style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\n        />\n    </div>\n)\n\nDivider.defaultProps = {\n    lineWidth: '100%',\n    lineHeight: '2px',\n    notchWidth: '90px',\n    notchHeight: '10px',\n    collapsed: false,\n    collapseDelay: 0,\n}\n\nexport default Divider\n","import { useRef, useState, useEffect } from 'react'\nimport classNames from 'classnames'\nimport './TextArea.css'\n\nconst TextArea = ({\n    className,\n    resize = 'none',\n    value,\n    onChange,\n    minRows = 1,\n    maxRows,\n    ...rest\n}) => {\n    const [rows, setRows] = useState(minRows)\n    const [textareaDimensions, setTextareaDimensions] = useState()\n    const textareaRef = useRef()\n\n    useEffect(() => {\n        const style = getComputedStyle(textareaRef.current)\n        const lineHeight = parseInt(style.lineHeight, 10)\n        const paddingHeight =\n            parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10)\n        setTextareaDimensions({ lineHeight, paddingHeight })\n    }, [])\n\n    const handleChange = event => {\n        onChange(event)\n\n        const { lineHeight, paddingHeight } = textareaDimensions\n        const previousRows = event.target.rows\n        event.target.rows = minRows\n\n        const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight)\n\n        if (currentRows === previousRows) {\n            event.target.rows = currentRows\n        }\n\n        if (maxRows && currentRows >= maxRows) {\n            event.target.rows = maxRows\n            event.target.scrollTop = event.target.scrollHeight\n        }\n\n        setRows(maxRows && currentRows > maxRows ? maxRows : currentRows)\n    }\n\n    return (\n        <textarea\n            className={classNames('textarea', className)}\n            ref={textareaRef}\n            onChange={handleChange}\n            style={{ '--resize': resize }}\n            rows={rows}\n            value={value}\n            {...rest}\n        />\n    )\n}\n\nexport default TextArea\n","import { useState, useRef } from 'react'\nimport classNames from 'classnames'\nimport { TransitionGroup, Transition } from 'react-transition-group'\nimport TextArea from './TextArea'\nimport { useId } from 'hooks'\nimport { isVisible } from 'utils/transition'\nimport { tokens } from 'components/ThemeProvider/theme'\nimport { msToNum, numToPx } from 'utils/style'\nimport Icon from 'components/Icon'\nimport './index.css'\n\nconst Input = ({\n    id,\n    label,\n    hasValue,\n    value,\n    multiline,\n    className,\n    style,\n    error,\n    onBlur,\n    ...rest\n}) => {\n    const [focused, setFocused] = useState(false)\n    const generatedId = useId()\n    const errorRef = useRef()\n    const inputId = id || `input-${generatedId}`\n    const labelId = `${inputId}-label`\n    const errorId = `${inputId}-error`\n    const InputElement = multiline ? TextArea : 'input'\n\n    const handleBlur = event => {\n        setFocused(false)\n\n        if (onBlur) {\n            onBlur(event)\n        }\n    }\n\n    return (\n        <div\n            className={classNames('input', className, { 'input--error': !!error })}\n            style={style}\n        >\n            <div className=\"input__content\">\n                <label\n                    className={classNames('input__label', {\n                        'input__label--focused': focused,\n                        'input__label--has-value': !!value,\n                    })}\n                    id={labelId}\n                    htmlFor={inputId}\n                >\n                    {label}\n                </label>\n                <InputElement\n                    className=\"input__element\"\n                    id={inputId}\n                    aria-labelledby={labelId}\n                    aria-describedby={!!error ? errorId : undefined}\n                    onFocus={() => setFocused(true)}\n                    onBlur={handleBlur}\n                    value={value}\n                    {...rest}\n                />\n                <div\n                    className={classNames('input__underline', {\n                        'input__underline--focused': focused,\n                    })}\n                />\n            </div>\n            <TransitionGroup component={null}>\n                {!!error && (\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\n                        {status => (\n                            <div\n                                className={classNames(\n                                    'input__error',\n                                    `input__error--${status}`\n                                )}\n                                id={errorId}\n                                role=\"alert\"\n                                style={{\n                                    '--height': isVisible(status)\n                                        ? numToPx(\n                                              errorRef.current?.getBoundingClientRect()\n                                                  .height\n                                          )\n                                        : '0px',\n                                }}\n                            >\n                                <div className=\"input__error-message\" ref={errorRef}>\n                                    <Icon icon=\"error\" />\n                                    {error}\n                                </div>\n                            </div>\n                        )}\n                    </Transition>\n                )}\n            </TransitionGroup>\n        </div>\n    )\n}\n\nexport default Input\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, userID) => {\n    const uID = userID || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.2.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import { useState, useRef } from 'react'\nimport classNames from 'classnames'\nimport { TransitionGroup, Transition } from 'react-transition-group'\nimport { Helmet } from 'react-helmet'\nimport Input from 'components/Input'\nimport DecoderText from 'components/DecoderText'\nimport Divider from 'components/Divider'\nimport { Button } from 'components/Button'\nimport Section from 'components/Section'\nimport Icon from 'components/Icon'\nimport { useScrollRestore, useFormInput, useRouteTransition } from 'hooks'\nimport { reflow, isVisible } from 'utils/transition'\nimport prerender from 'utils/prerender'\nimport { msToNum, numToPx, numToMs } from 'utils/style'\nimport { tokens } from 'components/ThemeProvider/theme'\nimport Heading from 'components/Heading'\nimport Text from 'components/Text'\nimport emailjs from 'emailjs-com'\nimport './index.css'\n\nconst initDelay = tokens.base.durationS\nconst SERVICE_ID = \"service_\";\nconst TEMPLATE_ID = \"template\";\nconst USER_ID = \"user_\";\n//write your credentials from emailjs.com\n\n{/*\n\nfunction getStatusError({\n    status,\n    errorMessage,\n    fallback = 'There was a problem with your request',\n}) {\n    if (status === 200) return false\n\n    const statuses = {\n        500: 'There was a problem with the server, try again later',\n        404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\n    }\n\n    if (errorMessage) {\n        return errorMessage\n    }\n\n    return statuses[status] || fallback\n}\n\n*/}\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\n    const numDelay = msToNum(delayMs) * multiplier\n    return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) }\n}\n\nconst Contact = () => {\n    const { status } = useRouteTransition()\n    const errorRef = useRef()\n    const form=useRef()\n    const email = useFormInput('')\n    const message = useFormInput('')\n    const [sending, setSending] = useState(false)\n    const [complete, setComplete] = useState(false)\n    const [statusError, setStatusError] = useState('')\n    useScrollRestore()\n\n    \n    const sendEmail = (e) => {\n        e.preventDefault();\n        setStatusError('')\n\n        if (sending) return\n\n        \n        \n        try {\n            setSending(true)\n        emailjs.sendForm(SERVICE_ID, TEMPLATE_ID, form.current, USER_ID)\n          .then((result) => {\n            setComplete(true)\n            setSending(false)\n              console.log(result.text);\n          }, (error) => {\n            setSending(false)\n        \n            setStatusError(\"Error occured!\")\n            \n              console.log(error.text);\n              console.log(\"avi1\");\n          });\n      \n    } catch (e) {\n        setSending(false)\n       \n    }\n\n}\n\n\n{/*\n    const onSubmit = useCallback(\n        async event => {\n            event.preventDefault()\n            setStatusError('')\n\n            if (sending) return\n\n            try {\n                setSending(true)\n\n                \n\n                const response = await fetch('/api/message', {\n                    method: 'POST',\n                    mode: 'cors',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        email: email.value,\n                        message: message.value,\n                    }),\n                })\n\n                const responseMessage = await response.json()\n\n                const statusError = getStatusError({\n                    status: response?.status,\n                    errorMessage: responseMessage?.error,\n                    fallback: 'There was a problem sending your message',\n                })\n\n                if (statusError) throw new Error(statusError)\n\n                setComplete(true)\n                setSending(false)\n            } catch (error) {\n                setSending(false)\n                setStatusError(error.message)\n            }\n        },\n        [email.value, message.value, sending]\n    )\n    */}\n    return (\n        <Section className={classNames('contact', `contact--${status}`)}>\n            <Helmet>\n                <title> Contact Me  | Avishkar Mohite</title>\n                <meta\n                    name=\"description\"\n                    content=\"Send me a message here or connect on social media to discuss about any project !\"\n                />\n            </Helmet>\n            <TransitionGroup component={null}>\n                {!complete && (\n                    <Transition\n                        appear\n                        mountOnEnter\n                        unmountOnExit\n                        timeout={1600}\n                        onEnter={reflow}\n                    >\n                        {status => (\n                            <form\n                                className=\"contact__form\"\n                                method=\"post\"\n                                ref={form} \n                                onSubmit={sendEmail}\n\n                            >\n                                <Heading\n                                    className={classNames(\n                                        'contact__title',\n                                        `contact__title--${status}`,\n                                        {\n                                            'contact__title--hidden': prerender,\n                                        }\n                                    )}\n                                    level={3}\n                                    as=\"h1\"\n                                    style={getDelay(\n                                        tokens.base.durationXS,\n                                        initDelay,\n                                        0.3\n                                    )}\n                                >\n                                    <DecoderText\n                                        text=\"Say hello\"\n                                        start={status !== 'exited' && !prerender}\n                                        delay={300}\n                                    />\n                                </Heading>\n                                <Divider\n                                    className={classNames(\n                                        'contact__divider',\n                                        `contact__divider--${status}`,\n                                        { 'contact__divider--hidden': prerender }\n                                    )}\n                                    style={getDelay(\n                                        tokens.base.durationXS,\n                                        initDelay,\n                                        0.4\n                                    )}\n                                />\n                                <Input\n                                    required\n                                    className={classNames(\n                                        'contact__input',\n                                        `contact__input--${status}`,\n                                        {\n                                            'contact__input--hidden': prerender,\n                                        }\n                                    )}\n                                    style={getDelay(tokens.base.durationXS, initDelay)}\n                                    autoComplete=\"email\"\n                                    label=\"Your Email\"\n                                    type=\"email\"\n                                    name=\"email\"\n                                    maxLength={512}\n                                    {...email}\n                                />\n                                <Input\n                                    required\n                                    multiline\n                                    className={classNames(\n                                        'contact__input',\n                                        `contact__input--${status}`,\n                                        {\n                                            'contact__input--hidden': prerender,\n                                        }\n                                    )}\n                                    style={getDelay(tokens.base.durationS, initDelay)}\n                                    autoComplete=\"off\"\n                                    label=\"Message\"\n                                    name=\"message\"\n                                    maxLength={4096}\n                                    {...message}\n                                />\n                                <TransitionGroup component={null}>\n                                    {!!statusError && (\n                                        <Transition\n                                            timeout={msToNum(tokens.base.durationM)}\n                                        >\n                                            {errorStatus => (\n                                                <div\n                                                    className={classNames(\n                                                        'contact__form-error',\n                                                        `contact__form-error--${errorStatus}`\n                                                    )}\n                                                    style={{\n                                                        '--height': isVisible(errorStatus)\n                                                            ? numToPx(\n                                                                  errorRef.current?.getBoundingClientRect()\n                                                                      .height\n                                                              )\n                                                            : '0px',\n                                                    }}\n                                                >\n                                                    <div\n                                                        className=\"contact__form-error-content\"\n                                                        ref={errorRef}\n                                                    >\n                                                        <div className=\"contact__form-error-message\">\n                                                            <Icon\n                                                                className=\"contact__form-error-icon\"\n                                                                icon=\"error\"\n                                                            />\n                                                            {statusError}\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </Transition>\n                                    )}\n                                </TransitionGroup>\n                                <Button\n                                    className={classNames(\n                                        'contact__button',\n                                        `contact__button--${status}`,\n                                        {\n                                            'contact__button--hidden': prerender,\n                                            'contact__button--sending': sending,\n                                        }\n                                    )}\n                                    style={getDelay(tokens.base.durationM, initDelay)}\n                                    disabled={sending}\n                                    loading={sending}\n                                    loadingText=\"Sending...\"\n                                    icon=\"send\"\n                                    type=\"submit\"\n                                    value=\"Send\"\n                                >\n                                    Send Message\n                                </Button>\n                            </form>\n                        )}\n                    </Transition>\n                )}\n                {complete && (\n                    <Transition\n                        appear\n                        mountOnEnter\n                        unmountOnExit\n                        onEnter={reflow}\n                        timeout={0}\n                    >\n                        {status => (\n                            <div className=\"contact__complete\" aria-live=\"polite\">\n                                <Heading\n                                    level={3}\n                                    as=\"h3\"\n                                    className={classNames(\n                                        'contact__complete-title',\n                                        `contact__complete-title--${status}`\n                                    )}\n                                >\n                                    Message Sent\n                                </Heading>\n                                <Text\n                                    size=\"l\"\n                                    className={classNames(\n                                        'contact__complete-text',\n                                        `contact__complete-text--${status}`\n                                    )}\n                                    style={getDelay(tokens.base.durationXS)}\n                                >\n                                    I’ll get back to you ASAP, sit tight\n                                </Text>\n                                <Button\n                                    secondary\n                                    iconHoverShift\n                                    className={classNames(\n                                        'contact__complete-button',\n                                        `contact__complete-button--${status}`\n                                    )}\n                                    style={getDelay(tokens.base.durationM)}\n                                    href=\"/\"\n                                    icon=\"chevronRight\"\n                                >\n                                    Back to homepage\n                                </Button>\n                            </div>\n                        )}\n                    </Transition>\n                )}\n            </TransitionGroup>\n        </Section>\n    )\n}\n\nexport default Contact\n"],"sourceRoot":""}